<?php
/**
 * MetaformsApi
 * PHP version 5
 *
 * @category Class
 * @package  Metatavu\Metaform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Metaform REST API
 *
 * REST API for Metaform
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Metatavu\Metaform\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Metatavu\Metaform\ApiException;
use Metatavu\Metaform\Configuration;
use Metatavu\Metaform\HeaderSelector;
use Metatavu\Metaform\ObjectSerializer;

/**
 * MetaformsApi Class Doc Comment
 *
 * @category Class
 * @package  Metatavu\Metaform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MetaformsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createMetaform
     *
     * create new Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  \Metatavu\Metaform\Api\Model\Metaform $payload Payload (required)
     *
     * @throws \Metatavu\Metaform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Metaform\Api\Model\Metaform
     */
    public function createMetaform($realmId, $payload)
    {
        list($response) = $this->createMetaformWithHttpInfo($realmId, $payload);
        return $response;
    }

    /**
     * Operation createMetaformWithHttpInfo
     *
     * create new Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  \Metatavu\Metaform\Api\Model\Metaform $payload Payload (required)
     *
     * @throws \Metatavu\Metaform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Metaform\Api\Model\Metaform, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMetaformWithHttpInfo($realmId, $payload)
    {
        $returnType = '\Metatavu\Metaform\Api\Model\Metaform';
        $request = $this->createMetaformRequest($realmId, $payload);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                $umaResponse = $this->umaRetry($request, $e);
                if ($umaResponse) {
                    $response = $umaResponse; 
                } else {
                    throw new ApiException(
                        "[{$e->getCode()}] {$e->getMessage()}",
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null
                    );
                }
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\Metaform',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMetaformAsync
     *
     * create new Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  \Metatavu\Metaform\Api\Model\Metaform $payload Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMetaformAsync($realmId, $payload)
    {
        return $this->createMetaformAsyncWithHttpInfo($realmId, $payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMetaformAsyncWithHttpInfo
     *
     * create new Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  \Metatavu\Metaform\Api\Model\Metaform $payload Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMetaformAsyncWithHttpInfo($realmId, $payload)
    {
        $returnType = '\Metatavu\Metaform\Api\Model\Metaform';
        $request = $this->createMetaformRequest($realmId, $payload);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMetaform'
     *
     * @param  string $realmId realm id (required)
     * @param  \Metatavu\Metaform\Api\Model\Metaform $payload Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createMetaformRequest($realmId, $payload)
    {
        // verify the required parameter 'realmId' is set
        if ($realmId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realmId when calling createMetaform'
            );
        }
        // verify the required parameter 'payload' is set
        if ($payload === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling createMetaform'
            );
        }

        $resourcePath = '/realms/{realmId}/metaforms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($realmId !== null) {
            $resourcePath = str_replace(
                '{' . 'realmId' . '}',
                ObjectSerializer::toPathValue($realmId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payload)) {
            $_tempBody = $payload;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    /**
     * Operation deleteMetaform
     *
     * Deletes Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     *
     * @throws \Metatavu\Metaform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMetaform($realmId, $metaformId)
    {
        $this->deleteMetaformWithHttpInfo($realmId, $metaformId);
    }

    /**
     * Operation deleteMetaformWithHttpInfo
     *
     * Deletes Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     *
     * @throws \Metatavu\Metaform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMetaformWithHttpInfo($realmId, $metaformId)
    {
        $returnType = '';
        $request = $this->deleteMetaformRequest($realmId, $metaformId);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                $umaResponse = $this->umaRetry($request, $e);
                if ($umaResponse) {
                    $response = $umaResponse; 
                } else {
                    throw new ApiException(
                        "[{$e->getCode()}] {$e->getMessage()}",
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null
                    );
                }
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMetaformAsync
     *
     * Deletes Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMetaformAsync($realmId, $metaformId)
    {
        return $this->deleteMetaformAsyncWithHttpInfo($realmId, $metaformId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMetaformAsyncWithHttpInfo
     *
     * Deletes Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMetaformAsyncWithHttpInfo($realmId, $metaformId)
    {
        $returnType = '';
        $request = $this->deleteMetaformRequest($realmId, $metaformId);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMetaform'
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMetaformRequest($realmId, $metaformId)
    {
        // verify the required parameter 'realmId' is set
        if ($realmId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realmId when calling deleteMetaform'
            );
        }
        // verify the required parameter 'metaformId' is set
        if ($metaformId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $metaformId when calling deleteMetaform'
            );
        }

        $resourcePath = '/realms/{realmId}/metaforms/{metaformId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($realmId !== null) {
            $resourcePath = str_replace(
                '{' . 'realmId' . '}',
                ObjectSerializer::toPathValue($realmId),
                $resourcePath
            );
        }
        // path params
        if ($metaformId !== null) {
            $resourcePath = str_replace(
                '{' . 'metaformId' . '}',
                ObjectSerializer::toPathValue($metaformId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    /**
     * Operation findMetaform
     *
     * Finds single Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     *
     * @throws \Metatavu\Metaform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Metaform\Api\Model\Metaform
     */
    public function findMetaform($realmId, $metaformId)
    {
        list($response) = $this->findMetaformWithHttpInfo($realmId, $metaformId);
        return $response;
    }

    /**
     * Operation findMetaformWithHttpInfo
     *
     * Finds single Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     *
     * @throws \Metatavu\Metaform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Metaform\Api\Model\Metaform, HTTP status code, HTTP response headers (array of strings)
     */
    public function findMetaformWithHttpInfo($realmId, $metaformId)
    {
        $returnType = '\Metatavu\Metaform\Api\Model\Metaform';
        $request = $this->findMetaformRequest($realmId, $metaformId);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                $umaResponse = $this->umaRetry($request, $e);
                if ($umaResponse) {
                    $response = $umaResponse; 
                } else {
                    throw new ApiException(
                        "[{$e->getCode()}] {$e->getMessage()}",
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null
                    );
                }
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\Metaform',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findMetaformAsync
     *
     * Finds single Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findMetaformAsync($realmId, $metaformId)
    {
        return $this->findMetaformAsyncWithHttpInfo($realmId, $metaformId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findMetaformAsyncWithHttpInfo
     *
     * Finds single Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findMetaformAsyncWithHttpInfo($realmId, $metaformId)
    {
        $returnType = '\Metatavu\Metaform\Api\Model\Metaform';
        $request = $this->findMetaformRequest($realmId, $metaformId);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findMetaform'
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findMetaformRequest($realmId, $metaformId)
    {
        // verify the required parameter 'realmId' is set
        if ($realmId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realmId when calling findMetaform'
            );
        }
        // verify the required parameter 'metaformId' is set
        if ($metaformId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $metaformId when calling findMetaform'
            );
        }

        $resourcePath = '/realms/{realmId}/metaforms/{metaformId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($realmId !== null) {
            $resourcePath = str_replace(
                '{' . 'realmId' . '}',
                ObjectSerializer::toPathValue($realmId),
                $resourcePath
            );
        }
        // path params
        if ($metaformId !== null) {
            $resourcePath = str_replace(
                '{' . 'metaformId' . '}',
                ObjectSerializer::toPathValue($metaformId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    /**
     * Operation listMetaforms
     *
     * Lists Metaforms
     *
     * @param  string $realmId realm id (required)
     *
     * @throws \Metatavu\Metaform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Metaform\Api\Model\Metaform[]
     */
    public function listMetaforms($realmId)
    {
        list($response) = $this->listMetaformsWithHttpInfo($realmId);
        return $response;
    }

    /**
     * Operation listMetaformsWithHttpInfo
     *
     * Lists Metaforms
     *
     * @param  string $realmId realm id (required)
     *
     * @throws \Metatavu\Metaform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Metaform\Api\Model\Metaform[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listMetaformsWithHttpInfo($realmId)
    {
        $returnType = '\Metatavu\Metaform\Api\Model\Metaform[]';
        $request = $this->listMetaformsRequest($realmId);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                $umaResponse = $this->umaRetry($request, $e);
                if ($umaResponse) {
                    $response = $umaResponse; 
                } else {
                    throw new ApiException(
                        "[{$e->getCode()}] {$e->getMessage()}",
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null
                    );
                }
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\Metaform[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMetaformsAsync
     *
     * Lists Metaforms
     *
     * @param  string $realmId realm id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMetaformsAsync($realmId)
    {
        return $this->listMetaformsAsyncWithHttpInfo($realmId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMetaformsAsyncWithHttpInfo
     *
     * Lists Metaforms
     *
     * @param  string $realmId realm id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMetaformsAsyncWithHttpInfo($realmId)
    {
        $returnType = '\Metatavu\Metaform\Api\Model\Metaform[]';
        $request = $this->listMetaformsRequest($realmId);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMetaforms'
     *
     * @param  string $realmId realm id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listMetaformsRequest($realmId)
    {
        // verify the required parameter 'realmId' is set
        if ($realmId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realmId when calling listMetaforms'
            );
        }

        $resourcePath = '/realms/{realmId}/metaforms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($realmId !== null) {
            $resourcePath = str_replace(
                '{' . 'realmId' . '}',
                ObjectSerializer::toPathValue($realmId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    /**
     * Operation updateMetaform
     *
     * Updates Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     * @param  \Metatavu\Metaform\Api\Model\Metaform $payload Payload (required)
     *
     * @throws \Metatavu\Metaform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Metatavu\Metaform\Api\Model\Metaform
     */
    public function updateMetaform($realmId, $metaformId, $payload)
    {
        list($response) = $this->updateMetaformWithHttpInfo($realmId, $metaformId, $payload);
        return $response;
    }

    /**
     * Operation updateMetaformWithHttpInfo
     *
     * Updates Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     * @param  \Metatavu\Metaform\Api\Model\Metaform $payload Payload (required)
     *
     * @throws \Metatavu\Metaform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Metatavu\Metaform\Api\Model\Metaform, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMetaformWithHttpInfo($realmId, $metaformId, $payload)
    {
        $returnType = '\Metatavu\Metaform\Api\Model\Metaform';
        $request = $this->updateMetaformRequest($realmId, $metaformId, $payload);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                $umaResponse = $this->umaRetry($request, $e);
                if ($umaResponse) {
                    $response = $umaResponse; 
                } else {
                    throw new ApiException(
                        "[{$e->getCode()}] {$e->getMessage()}",
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null
                    );
                }
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\Metaform',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Metatavu\Metaform\Api\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMetaformAsync
     *
     * Updates Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     * @param  \Metatavu\Metaform\Api\Model\Metaform $payload Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMetaformAsync($realmId, $metaformId, $payload)
    {
        return $this->updateMetaformAsyncWithHttpInfo($realmId, $metaformId, $payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMetaformAsyncWithHttpInfo
     *
     * Updates Metaform
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     * @param  \Metatavu\Metaform\Api\Model\Metaform $payload Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMetaformAsyncWithHttpInfo($realmId, $metaformId, $payload)
    {
        $returnType = '\Metatavu\Metaform\Api\Model\Metaform';
        $request = $this->updateMetaformRequest($realmId, $metaformId, $payload);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMetaform'
     *
     * @param  string $realmId realm id (required)
     * @param  string $metaformId Metaform id (required)
     * @param  \Metatavu\Metaform\Api\Model\Metaform $payload Payload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateMetaformRequest($realmId, $metaformId, $payload)
    {
        // verify the required parameter 'realmId' is set
        if ($realmId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realmId when calling updateMetaform'
            );
        }
        // verify the required parameter 'metaformId' is set
        if ($metaformId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $metaformId when calling updateMetaform'
            );
        }
        // verify the required parameter 'payload' is set
        if ($payload === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling updateMetaform'
            );
        }

        $resourcePath = '/realms/{realmId}/metaforms/{metaformId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($realmId !== null) {
            $resourcePath = str_replace(
                '{' . 'realmId' . '}',
                ObjectSerializer::toPathValue($realmId),
                $resourcePath
            );
        }
        // path params
        if ($metaformId !== null) {
            $resourcePath = str_replace(
                '{' . 'metaformId' . '}',
                ObjectSerializer::toPathValue($metaformId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payload)) {
            $_tempBody = $payload;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=utf-8'],
                ['application/json;charset=utf-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    private function getUMATicket($response) {
        $result = []; 
        $wwwAuthenticateHeader = $response->getHeader("www-authenticate")[0];
        if ($wwwAuthenticateHeader) {
            if (strpos($wwwAuthenticateHeader, 'UMA ') !== false) {
                $headerComponents = explode(",", substr($wwwAuthenticateHeader, 4));
                foreach ($headerComponents as $headerComponent) {
                    $componentParts = explode("=", $headerComponent, 2);
                    $result[$componentParts[0]] = trim($componentParts[1], '"');
                }
            }
        }

        return $result;
    }

    private function getRPT($ticket) {
        $authorization = $this->config->getApiKeyWithPrefix('Authorization');
        $asUri = $ticket["as_uri"]; 
        $url = "$asUri/protocol/openid-connect/token";
        $body = [
            "grant_type" => "urn:ietf:params:oauth:grant-type:uma-ticket",
            "ticket" => $ticket["ticket"],
            "submit_request" => "false"
        ];

        $headers = [
            "Authorization" => $authorization,
            "Content-Type" => "application/x-www-form-urlencoded"
        ];

        $response = $this->client->request('POST', $url, [
            'headers' => $headers,
            'form_params' => $body
        ]);

        $body = $response->getBody();

        if ($body) {
            $jsonBody = json_decode($body, true);
            if ($jsonBody && $jsonBody["access_token"]) {
                return $jsonBody["access_token"];
            }
        }

        return null;
    }

    private function umaRetry($request, $e) {
        try {
            if ($e->getCode() == 401) {
                $ticket = $this->getUMATicket($e->getResponse());
                $rpt = $this->getRPT($ticket);
                $retry = !!$rpt;

                if ($retry) {
                    $headers = $request->getHeaders();
                    $headers["Authorization"] = "bearer $rpt";
                    $newRequest = new Request($request->getMethod(), $request->getUri(), $headers, $request->getBody());
                    return $this->client->send($newRequest);
                }
            }
        } catch (RequestException $e) {
        }

        return null;
    }
}
