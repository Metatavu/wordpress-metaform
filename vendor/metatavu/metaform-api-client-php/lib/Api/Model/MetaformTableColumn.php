<?php
/**
 * MetaformTableColumn
 *
 * PHP version 5
 *
 * @category Class
 * @package  Metatavu\Metaform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Metaform REST API
 *
 * REST API for Metaform
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Metatavu\Metaform\Api\Model;

use \ArrayAccess;
use \Metatavu\Metaform\ObjectSerializer;

/**
 * MetaformTableColumn Class Doc Comment
 *
 * @category Class
 * @package  Metatavu\Metaform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MetaformTableColumn implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MetaformTableColumn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => '\Metatavu\Metaform\Api\Model\MetaformTableColumnType',
        'name' => 'string',
        'title' => 'string',
        'calculateSum' => 'bool',
        'sumPostfix' => 'string',
        'columnWidth' => 'int',
        'placeholder' => 'string',
        'readonly' => 'bool',
        'required' => 'bool',
        'sourceUrl' => 'string',
        'html' => 'string',
        'action' => 'string',
        'values' => '\Metatavu\Metaform\Api\Model\MetaformTableColumnValues'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'name' => null,
        'title' => null,
        'calculateSum' => null,
        'sumPostfix' => null,
        'columnWidth' => 'int32',
        'placeholder' => null,
        'readonly' => null,
        'required' => null,
        'sourceUrl' => 'url',
        'html' => null,
        'action' => null,
        'values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'name' => 'name',
        'title' => 'title',
        'calculateSum' => 'calculate-sum',
        'sumPostfix' => 'sum-postfix',
        'columnWidth' => 'column-width',
        'placeholder' => 'placeholder',
        'readonly' => 'readonly',
        'required' => 'required',
        'sourceUrl' => 'source-url',
        'html' => 'html',
        'action' => 'action',
        'values' => 'values'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'name' => 'setName',
        'title' => 'setTitle',
        'calculateSum' => 'setCalculateSum',
        'sumPostfix' => 'setSumPostfix',
        'columnWidth' => 'setColumnWidth',
        'placeholder' => 'setPlaceholder',
        'readonly' => 'setReadonly',
        'required' => 'setRequired',
        'sourceUrl' => 'setSourceUrl',
        'html' => 'setHtml',
        'action' => 'setAction',
        'values' => 'setValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'name' => 'getName',
        'title' => 'getTitle',
        'calculateSum' => 'getCalculateSum',
        'sumPostfix' => 'getSumPostfix',
        'columnWidth' => 'getColumnWidth',
        'placeholder' => 'getPlaceholder',
        'readonly' => 'getReadonly',
        'required' => 'getRequired',
        'sourceUrl' => 'getSourceUrl',
        'html' => 'getHtml',
        'action' => 'getAction',
        'values' => 'getValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['calculateSum'] = isset($data['calculateSum']) ? $data['calculateSum'] : null;
        $this->container['sumPostfix'] = isset($data['sumPostfix']) ? $data['sumPostfix'] : null;
        $this->container['columnWidth'] = isset($data['columnWidth']) ? $data['columnWidth'] : null;
        $this->container['placeholder'] = isset($data['placeholder']) ? $data['placeholder'] : null;
        $this->container['readonly'] = isset($data['readonly']) ? $data['readonly'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['sourceUrl'] = isset($data['sourceUrl']) ? $data['sourceUrl'] : null;
        $this->container['html'] = isset($data['html']) ? $data['html'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['values'] = isset($data['values']) ? $data['values'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets type
     *
     * @return \Metatavu\Metaform\Api\Model\MetaformTableColumnType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Metatavu\Metaform\Api\Model\MetaformTableColumnType $type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Column name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Column title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets calculateSum
     *
     * @return bool
     */
    public function getCalculateSum()
    {
        return $this->container['calculateSum'];
    }

    /**
     * Sets calculateSum
     *
     * @param bool $calculateSum Defines column should automatically calculate sum
     *
     * @return $this
     */
    public function setCalculateSum($calculateSum)
    {
        $this->container['calculateSum'] = $calculateSum;

        return $this;
    }

    /**
     * Gets sumPostfix
     *
     * @return string
     */
    public function getSumPostfix()
    {
        return $this->container['sumPostfix'];
    }

    /**
     * Sets sumPostfix
     *
     * @param string $sumPostfix Postfix for calculated sum
     *
     * @return $this
     */
    public function setSumPostfix($sumPostfix)
    {
        $this->container['sumPostfix'] = $sumPostfix;

        return $this;
    }

    /**
     * Gets columnWidth
     *
     * @return int
     */
    public function getColumnWidth()
    {
        return $this->container['columnWidth'];
    }

    /**
     * Sets columnWidth
     *
     * @param int $columnWidth Defines column width
     *
     * @return $this
     */
    public function setColumnWidth($columnWidth)
    {
        $this->container['columnWidth'] = $columnWidth;

        return $this;
    }

    /**
     * Gets placeholder
     *
     * @return string
     */
    public function getPlaceholder()
    {
        return $this->container['placeholder'];
    }

    /**
     * Sets placeholder
     *
     * @param string $placeholder Placeholder for column field
     *
     * @return $this
     */
    public function setPlaceholder($placeholder)
    {
        $this->container['placeholder'] = $placeholder;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool $readonly Defines column as readonly
     *
     * @return $this
     */
    public function setReadonly($readonly)
    {
        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required Defines column as requires
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets sourceUrl
     *
     * @return string
     */
    public function getSourceUrl()
    {
        return $this->container['sourceUrl'];
    }

    /**
     * Sets sourceUrl
     *
     * @param string $sourceUrl Defines source url for autocomplete columns
     *
     * @return $this
     */
    public function setSourceUrl($sourceUrl)
    {
        $this->container['sourceUrl'] = $sourceUrl;

        return $this;
    }

    /**
     * Gets html
     *
     * @return string
     */
    public function getHtml()
    {
        return $this->container['html'];
    }

    /**
     * Sets html
     *
     * @param string $html Html code for html columns
     *
     * @return $this
     */
    public function setHtml($html)
    {
        $this->container['html'] = $html;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Action for button columns
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets values
     *
     * @return \Metatavu\Metaform\Api\Model\MetaformTableColumnValues
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param \Metatavu\Metaform\Api\Model\MetaformTableColumnValues $values
     *
     * @return $this
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


