<?php
/**
 * MetaformField
 *
 * PHP version 5
 *
 * @category Class
 * @package  Metatavu\Metaform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Metaform REST API
 *
 * REST API for Metaform
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Metatavu\Metaform\Api\Model;

use \ArrayAccess;
use \Metatavu\Metaform\ObjectSerializer;

/**
 * MetaformField Class Doc Comment
 *
 * @category Class
 * @package  Metatavu\Metaform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MetaformField implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MetaformField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'visibleIf' => '\Metatavu\Metaform\Api\Model\MetaformVisibleIf',
        'permissionContexts' => '\Metatavu\Metaform\Api\Model\MetaformFieldPermissioncontexts',
        'name' => 'string',
        'type' => '\Metatavu\Metaform\Api\Model\MetaformFieldType',
        'title' => 'string',
        'required' => 'bool',
        'contexts' => 'string[]',
        'flags' => '\Metatavu\Metaform\Api\Model\MetaformFieldFlags',
        'placeholder' => 'string',
        'class' => 'string',
        'readonly' => 'bool',
        'help' => 'string',
        'default' => 'string',
        'min' => 'int',
        'max' => 'int',
        'step' => 'int',
        'checked' => 'bool',
        'printable' => 'bool',
        'options' => '\Metatavu\Metaform\Api\Model\MetaformFieldOption[]',
        'sourceUrl' => 'string',
        'uploadUrl' => 'string',
        'singleFile' => 'bool',
        'onlyImages' => 'bool',
        'maxFileSize' => 'int',
        'addRows' => 'bool',
        'draggable' => 'bool',
        'columns' => '\Metatavu\Metaform\Api\Model\MetaformTableColumn[]',
        'src' => 'string',
        'text' => 'string',
        'html' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'visibleIf' => null,
        'permissionContexts' => null,
        'name' => null,
        'type' => null,
        'title' => null,
        'required' => null,
        'contexts' => null,
        'flags' => null,
        'placeholder' => null,
        'class' => null,
        'readonly' => null,
        'help' => null,
        'default' => null,
        'min' => 'int32',
        'max' => 'int32',
        'step' => 'int32',
        'checked' => null,
        'printable' => null,
        'options' => null,
        'sourceUrl' => 'url',
        'uploadUrl' => 'url',
        'singleFile' => null,
        'onlyImages' => null,
        'maxFileSize' => 'int64',
        'addRows' => null,
        'draggable' => null,
        'columns' => null,
        'src' => 'url',
        'text' => null,
        'html' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'visibleIf' => 'visible-if',
        'permissionContexts' => 'permission-contexts',
        'name' => 'name',
        'type' => 'type',
        'title' => 'title',
        'required' => 'required',
        'contexts' => 'contexts',
        'flags' => 'flags',
        'placeholder' => 'placeholder',
        'class' => 'class',
        'readonly' => 'readonly',
        'help' => 'help',
        'default' => 'default',
        'min' => 'min',
        'max' => 'max',
        'step' => 'step',
        'checked' => 'checked',
        'printable' => 'printable',
        'options' => 'options',
        'sourceUrl' => 'source-url',
        'uploadUrl' => 'upload-url',
        'singleFile' => 'single-file',
        'onlyImages' => 'only-images',
        'maxFileSize' => 'max-file-size',
        'addRows' => 'add-rows',
        'draggable' => 'draggable',
        'columns' => 'columns',
        'src' => 'src',
        'text' => 'text',
        'html' => 'html'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'visibleIf' => 'setVisibleIf',
        'permissionContexts' => 'setPermissionContexts',
        'name' => 'setName',
        'type' => 'setType',
        'title' => 'setTitle',
        'required' => 'setRequired',
        'contexts' => 'setContexts',
        'flags' => 'setFlags',
        'placeholder' => 'setPlaceholder',
        'class' => 'setClass',
        'readonly' => 'setReadonly',
        'help' => 'setHelp',
        'default' => 'setDefault',
        'min' => 'setMin',
        'max' => 'setMax',
        'step' => 'setStep',
        'checked' => 'setChecked',
        'printable' => 'setPrintable',
        'options' => 'setOptions',
        'sourceUrl' => 'setSourceUrl',
        'uploadUrl' => 'setUploadUrl',
        'singleFile' => 'setSingleFile',
        'onlyImages' => 'setOnlyImages',
        'maxFileSize' => 'setMaxFileSize',
        'addRows' => 'setAddRows',
        'draggable' => 'setDraggable',
        'columns' => 'setColumns',
        'src' => 'setSrc',
        'text' => 'setText',
        'html' => 'setHtml'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'visibleIf' => 'getVisibleIf',
        'permissionContexts' => 'getPermissionContexts',
        'name' => 'getName',
        'type' => 'getType',
        'title' => 'getTitle',
        'required' => 'getRequired',
        'contexts' => 'getContexts',
        'flags' => 'getFlags',
        'placeholder' => 'getPlaceholder',
        'class' => 'getClass',
        'readonly' => 'getReadonly',
        'help' => 'getHelp',
        'default' => 'getDefault',
        'min' => 'getMin',
        'max' => 'getMax',
        'step' => 'getStep',
        'checked' => 'getChecked',
        'printable' => 'getPrintable',
        'options' => 'getOptions',
        'sourceUrl' => 'getSourceUrl',
        'uploadUrl' => 'getUploadUrl',
        'singleFile' => 'getSingleFile',
        'onlyImages' => 'getOnlyImages',
        'maxFileSize' => 'getMaxFileSize',
        'addRows' => 'getAddRows',
        'draggable' => 'getDraggable',
        'columns' => 'getColumns',
        'src' => 'getSrc',
        'text' => 'getText',
        'html' => 'getHtml'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['visibleIf'] = isset($data['visibleIf']) ? $data['visibleIf'] : null;
        $this->container['permissionContexts'] = isset($data['permissionContexts']) ? $data['permissionContexts'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['contexts'] = isset($data['contexts']) ? $data['contexts'] : null;
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
        $this->container['placeholder'] = isset($data['placeholder']) ? $data['placeholder'] : null;
        $this->container['class'] = isset($data['class']) ? $data['class'] : null;
        $this->container['readonly'] = isset($data['readonly']) ? $data['readonly'] : null;
        $this->container['help'] = isset($data['help']) ? $data['help'] : null;
        $this->container['default'] = isset($data['default']) ? $data['default'] : null;
        $this->container['min'] = isset($data['min']) ? $data['min'] : null;
        $this->container['max'] = isset($data['max']) ? $data['max'] : null;
        $this->container['step'] = isset($data['step']) ? $data['step'] : null;
        $this->container['checked'] = isset($data['checked']) ? $data['checked'] : null;
        $this->container['printable'] = isset($data['printable']) ? $data['printable'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['sourceUrl'] = isset($data['sourceUrl']) ? $data['sourceUrl'] : null;
        $this->container['uploadUrl'] = isset($data['uploadUrl']) ? $data['uploadUrl'] : null;
        $this->container['singleFile'] = isset($data['singleFile']) ? $data['singleFile'] : null;
        $this->container['onlyImages'] = isset($data['onlyImages']) ? $data['onlyImages'] : null;
        $this->container['maxFileSize'] = isset($data['maxFileSize']) ? $data['maxFileSize'] : null;
        $this->container['addRows'] = isset($data['addRows']) ? $data['addRows'] : null;
        $this->container['draggable'] = isset($data['draggable']) ? $data['draggable'] : null;
        $this->container['columns'] = isset($data['columns']) ? $data['columns'] : null;
        $this->container['src'] = isset($data['src']) ? $data['src'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['html'] = isset($data['html']) ? $data['html'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets visibleIf
     *
     * @return \Metatavu\Metaform\Api\Model\MetaformVisibleIf
     */
    public function getVisibleIf()
    {
        return $this->container['visibleIf'];
    }

    /**
     * Sets visibleIf
     *
     * @param \Metatavu\Metaform\Api\Model\MetaformVisibleIf $visibleIf
     *
     * @return $this
     */
    public function setVisibleIf($visibleIf)
    {
        $this->container['visibleIf'] = $visibleIf;

        return $this;
    }

    /**
     * Gets permissionContexts
     *
     * @return \Metatavu\Metaform\Api\Model\MetaformFieldPermissioncontexts
     */
    public function getPermissionContexts()
    {
        return $this->container['permissionContexts'];
    }

    /**
     * Sets permissionContexts
     *
     * @param \Metatavu\Metaform\Api\Model\MetaformFieldPermissioncontexts $permissionContexts
     *
     * @return $this
     */
    public function setPermissionContexts($permissionContexts)
    {
        $this->container['permissionContexts'] = $permissionContexts;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Field name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Metatavu\Metaform\Api\Model\MetaformFieldType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Metatavu\Metaform\Api\Model\MetaformFieldType $type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets contexts
     *
     * @return string[]
     */
    public function getContexts()
    {
        return $this->container['contexts'];
    }

    /**
     * Sets contexts
     *
     * @param string[] $contexts
     *
     * @return $this
     */
    public function setContexts($contexts)
    {
        $this->container['contexts'] = $contexts;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return \Metatavu\Metaform\Api\Model\MetaformFieldFlags
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param \Metatavu\Metaform\Api\Model\MetaformFieldFlags $flags
     *
     * @return $this
     */
    public function setFlags($flags)
    {
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets placeholder
     *
     * @return string
     */
    public function getPlaceholder()
    {
        return $this->container['placeholder'];
    }

    /**
     * Sets placeholder
     *
     * @param string $placeholder
     *
     * @return $this
     */
    public function setPlaceholder($placeholder)
    {
        $this->container['placeholder'] = $placeholder;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string $class
     *
     * @return $this
     */
    public function setClass($class)
    {
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool $readonly
     *
     * @return $this
     */
    public function setReadonly($readonly)
    {
        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets help
     *
     * @return string
     */
    public function getHelp()
    {
        return $this->container['help'];
    }

    /**
     * Sets help
     *
     * @param string $help
     *
     * @return $this
     */
    public function setHelp($help)
    {
        $this->container['help'] = $help;

        return $this;
    }

    /**
     * Gets default
     *
     * @return string
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param string $default a default value for a field
     *
     * @return $this
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets min
     *
     * @return int
     */
    public function getMin()
    {
        return $this->container['min'];
    }

    /**
     * Sets min
     *
     * @param int $min Minimum value for a field. Only for number fields
     *
     * @return $this
     */
    public function setMin($min)
    {
        $this->container['min'] = $min;

        return $this;
    }

    /**
     * Gets max
     *
     * @return int
     */
    public function getMax()
    {
        return $this->container['max'];
    }

    /**
     * Sets max
     *
     * @param int $max Maximum value for a field. Only for number fields
     *
     * @return $this
     */
    public function setMax($max)
    {
        $this->container['max'] = $max;

        return $this;
    }

    /**
     * Gets step
     *
     * @return int
     */
    public function getStep()
    {
        return $this->container['step'];
    }

    /**
     * Sets step
     *
     * @param int $step Value step for a field. Only for number fields
     *
     * @return $this
     */
    public function setStep($step)
    {
        $this->container['step'] = $step;

        return $this;
    }

    /**
     * Gets checked
     *
     * @return bool
     */
    public function getChecked()
    {
        return $this->container['checked'];
    }

    /**
     * Sets checked
     *
     * @param bool $checked Whether checkbox should be checked by default. Only for checkbox fields
     *
     * @return $this
     */
    public function setChecked($checked)
    {
        $this->container['checked'] = $checked;

        return $this;
    }

    /**
     * Gets printable
     *
     * @return bool
     */
    public function getPrintable()
    {
        return $this->container['printable'];
    }

    /**
     * Sets printable
     *
     * @param bool $printable Defines whether field is printable or not. Only for table fields
     *
     * @return $this
     */
    public function setPrintable($printable)
    {
        $this->container['printable'] = $printable;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Metatavu\Metaform\Api\Model\MetaformFieldOption[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Metatavu\Metaform\Api\Model\MetaformFieldOption[] $options Options for radio, checklist, select fields
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets sourceUrl
     *
     * @return string
     */
    public function getSourceUrl()
    {
        return $this->container['sourceUrl'];
    }

    /**
     * Sets sourceUrl
     *
     * @param string $sourceUrl Source url for autocomplete and autocomplete-multiple fields
     *
     * @return $this
     */
    public function setSourceUrl($sourceUrl)
    {
        $this->container['sourceUrl'] = $sourceUrl;

        return $this;
    }

    /**
     * Gets uploadUrl
     *
     * @return string
     */
    public function getUploadUrl()
    {
        return $this->container['uploadUrl'];
    }

    /**
     * Sets uploadUrl
     *
     * @param string $uploadUrl Upload url for files field.
     *
     * @return $this
     */
    public function setUploadUrl($uploadUrl)
    {
        $this->container['uploadUrl'] = $uploadUrl;

        return $this;
    }

    /**
     * Gets singleFile
     *
     * @return bool
     */
    public function getSingleFile()
    {
        return $this->container['singleFile'];
    }

    /**
     * Sets singleFile
     *
     * @param bool $singleFile Defines whether file fields allow multiple files or just one
     *
     * @return $this
     */
    public function setSingleFile($singleFile)
    {
        $this->container['singleFile'] = $singleFile;

        return $this;
    }

    /**
     * Gets onlyImages
     *
     * @return bool
     */
    public function getOnlyImages()
    {
        return $this->container['onlyImages'];
    }

    /**
     * Sets onlyImages
     *
     * @param bool $onlyImages Defines whether file fields allow only images
     *
     * @return $this
     */
    public function setOnlyImages($onlyImages)
    {
        $this->container['onlyImages'] = $onlyImages;

        return $this;
    }

    /**
     * Gets maxFileSize
     *
     * @return int
     */
    public function getMaxFileSize()
    {
        return $this->container['maxFileSize'];
    }

    /**
     * Sets maxFileSize
     *
     * @param int $maxFileSize Maximum upload size for image filds
     *
     * @return $this
     */
    public function setMaxFileSize($maxFileSize)
    {
        $this->container['maxFileSize'] = $maxFileSize;

        return $this;
    }

    /**
     * Gets addRows
     *
     * @return bool
     */
    public function getAddRows()
    {
        return $this->container['addRows'];
    }

    /**
     * Sets addRows
     *
     * @param bool $addRows Defines whether user can add more table rows.
     *
     * @return $this
     */
    public function setAddRows($addRows)
    {
        $this->container['addRows'] = $addRows;

        return $this;
    }

    /**
     * Gets draggable
     *
     * @return bool
     */
    public function getDraggable()
    {
        return $this->container['draggable'];
    }

    /**
     * Sets draggable
     *
     * @param bool $draggable Defines whether table rows should be draggable.
     *
     * @return $this
     */
    public function setDraggable($draggable)
    {
        $this->container['draggable'] = $draggable;

        return $this;
    }

    /**
     * Gets columns
     *
     * @return \Metatavu\Metaform\Api\Model\MetaformTableColumn[]
     */
    public function getColumns()
    {
        return $this->container['columns'];
    }

    /**
     * Sets columns
     *
     * @param \Metatavu\Metaform\Api\Model\MetaformTableColumn[] $columns Columns for table fields
     *
     * @return $this
     */
    public function setColumns($columns)
    {
        $this->container['columns'] = $columns;

        return $this;
    }

    /**
     * Gets src
     *
     * @return string
     */
    public function getSrc()
    {
        return $this->container['src'];
    }

    /**
     * Sets src
     *
     * @param string $src Url for logo field.
     *
     * @return $this
     */
    public function setSrc($src)
    {
        $this->container['src'] = $src;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text Text for small field.
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets html
     *
     * @return string
     */
    public function getHtml()
    {
        return $this->container['html'];
    }

    /**
     * Sets html
     *
     * @param string $html Html code for html field.
     *
     * @return $this
     */
    public function setHtml($html)
    {
        $this->container['html'] = $html;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


