<?php
/**
 * MetaformFieldPermissioncontexts
 *
 * PHP version 5
 *
 * @category Class
 * @package  Metatavu\Metaform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Metaform REST API
 *
 * REST API for Metaform
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Metatavu\Metaform\Api\Model;

use \ArrayAccess;
use \Metatavu\Metaform\ObjectSerializer;

/**
 * MetaformFieldPermissioncontexts Class Doc Comment
 *
 * @category Class
 * @package  Metatavu\Metaform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MetaformFieldPermissioncontexts implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MetaformField_permissioncontexts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'viewGroup' => 'bool',
        'editGroup' => 'bool',
        'notifyGroup' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'viewGroup' => null,
        'editGroup' => null,
        'notifyGroup' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'viewGroup' => 'view-group',
        'editGroup' => 'edit-group',
        'notifyGroup' => 'notify-group'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'viewGroup' => 'setViewGroup',
        'editGroup' => 'setEditGroup',
        'notifyGroup' => 'setNotifyGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'viewGroup' => 'getViewGroup',
        'editGroup' => 'getEditGroup',
        'notifyGroup' => 'getNotifyGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['viewGroup'] = isset($data['viewGroup']) ? $data['viewGroup'] : false;
        $this->container['editGroup'] = isset($data['editGroup']) ? $data['editGroup'] : false;
        $this->container['notifyGroup'] = isset($data['notifyGroup']) ? $data['notifyGroup'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets viewGroup
     *
     * @return bool
     */
    public function getViewGroup()
    {
        return $this->container['viewGroup'];
    }

    /**
     * Sets viewGroup
     *
     * @param bool $viewGroup Field value is used as security group with view permission
     *
     * @return $this
     */
    public function setViewGroup($viewGroup)
    {
        $this->container['viewGroup'] = $viewGroup;

        return $this;
    }

    /**
     * Gets editGroup
     *
     * @return bool
     */
    public function getEditGroup()
    {
        return $this->container['editGroup'];
    }

    /**
     * Sets editGroup
     *
     * @param bool $editGroup Field value is used as security group with edit permission
     *
     * @return $this
     */
    public function setEditGroup($editGroup)
    {
        $this->container['editGroup'] = $editGroup;

        return $this;
    }

    /**
     * Gets notifyGroup
     *
     * @return bool
     */
    public function getNotifyGroup()
    {
        return $this->container['notifyGroup'];
    }

    /**
     * Sets notifyGroup
     *
     * @param bool $notifyGroup Field value is used as security group with notification permission
     *
     * @return $this
     */
    public function setNotifyGroup($notifyGroup)
    {
        $this->container['notifyGroup'] = $notifyGroup;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


